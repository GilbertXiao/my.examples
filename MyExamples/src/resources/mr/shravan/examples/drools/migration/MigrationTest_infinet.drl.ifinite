package mr.shravan.examples.drools
 
import mr.shravan.examples.domain.Bank;
import mr.shravan.examples.domain.Customer;
import mr.shravan.examples.domain.Account;

declare type State
    @propertyChangeSupport
end

rule "Rule-1"
	salience 100
    when
        m: Bank()
        c: Customer()
        a: Account()
        eval(m.addCustomer(c,a))
    then
        System.out.println("Rule-1 Demonstrating <EqualTo> Operator" );
end

rule "Rule-2"
	salience 90
    when
        m : Bank( status == Bank.INACTIVE, condition1, message : message )
    then
	    modify (m) {
	     setMessage("Set account as active"),
	     setStatus(Bank.ACTIVE) 
	    };
	    
		System.out.println( "Rule-2:"+ message );
		System.out.println(drools.getClass());
end

rule "Rule-3"
	salience 80
    when
        m : Bank( status == Bank.ACTIVE, condition2, message : message )
    then
        System.out.println( "Rule-3: "+message );
        update (m) {
	     setMessage("Reset account as inactive"),
	     setStatus(Bank.INACTIVE) 
	    };
	    
end

rule "Rule-4"
	salience 70
    when
        m : Bank( status == Bank.INACTIVE, condition3, message : message )
    then
        System.out.println( "Rule-4: "+message );
        update (m) {
	     setMessage("Again Reset account as inactive"),
	     setStatus(Bank.ACTIVE) 
	    };
end
